
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrokerAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  brokerType: 'brokerType',
  accountNumber: 'accountNumber',
  displayName: 'displayName',
  encryptedCredentials: 'encryptedCredentials',
  isActive: 'isActive',
  lastSyncAt: 'lastSyncAt',
  lastSyncStatus: 'lastSyncStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  brokerAccountId: 'brokerAccountId',
  externalTradeId: 'externalTradeId',
  symbol: 'symbol',
  tradeType: 'tradeType',
  openTime: 'openTime',
  closeTime: 'closeTime',
  quantity: 'quantity',
  openPrice: 'openPrice',
  closePrice: 'closePrice',
  profit: 'profit',
  commission: 'commission',
  swap: 'swap',
  tags: 'tags',
  notes: 'notes',
  rawData: 'rawData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  brokerAccountId: 'brokerAccountId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  tradesImported: 'tradesImported',
  tradesFailed: 'tradesFailed',
  errorMessage: 'errorMessage',
  errorDetails: 'errorDetails'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BrokerType = exports.$Enums.BrokerType = {
  MT5: 'MT5',
  MT4: 'MT4',
  IBKR: 'IBKR'
};

exports.TradeType = exports.$Enums.TradeType = {
  BUY: 'BUY',
  SELL: 'SELL'
};

exports.SyncStatus = exports.$Enums.SyncStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PARTIAL: 'PARTIAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  BrokerAccount: 'BrokerAccount',
  Trade: 'Trade',
  SyncLog: 'SyncLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\Product\\primary-server\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\Product\\primary-server\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id           String   @id @default(uuid())\n  email        String   @unique\n  passwordHash String\n  firstName    String?\n  lastName     String?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  brokerAccounts BrokerAccount[]\n  trades         Trade[]\n\n  @@map(\"users\")\n}\n\nmodel BrokerAccount {\n  id            String     @id @default(uuid())\n  userId        String\n  brokerType    BrokerType\n  accountNumber String\n  displayName   String?\n\n  // Encrypted credentials stored here\n  encryptedCredentials String\n\n  isActive       Boolean     @default(true)\n  lastSyncAt     DateTime?\n  lastSyncStatus SyncStatus?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  trades   Trade[]\n  syncLogs SyncLog[]\n\n  @@unique([userId, accountNumber, brokerType])\n  @@map(\"broker_accounts\")\n}\n\nmodel Trade {\n  id              String @id @default(uuid())\n  userId          String\n  brokerAccountId String\n\n  // Normalized trade data\n  externalTradeId String // Trade ID from broker\n  symbol          String\n  tradeType       TradeType\n\n  openTime  DateTime\n  closeTime DateTime\n\n  quantity   Decimal @db.Decimal(18, 8)\n  openPrice  Decimal @db.Decimal(18, 8)\n  closePrice Decimal @db.Decimal(18, 8)\n\n  profit     Decimal  @db.Decimal(18, 2)\n  commission Decimal  @db.Decimal(18, 2)\n  swap       Decimal? @db.Decimal(18, 2)\n\n  // Analytics fields\n  tags  String[]\n  notes String?\n\n  // Metadata\n  rawData Json? // Store original broker data\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  brokerAccount BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)\n\n  @@unique([brokerAccountId, externalTradeId])\n  @@index([userId, closeTime])\n  @@index([symbol])\n  @@map(\"trades\")\n}\n\nmodel SyncLog {\n  id              String @id @default(uuid())\n  brokerAccountId String\n\n  status      SyncStatus\n  startedAt   DateTime   @default(now())\n  completedAt DateTime?\n\n  tradesImported Int @default(0)\n  tradesFailed   Int @default(0)\n\n  errorMessage String?\n  errorDetails Json?\n\n  brokerAccount BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)\n\n  @@map(\"sync_logs\")\n}\n\nenum BrokerType {\n  MT5\n  MT4\n  IBKR\n}\n\nenum TradeType {\n  BUY\n  SELL\n}\n\nenum SyncStatus {\n  PENDING\n  IN_PROGRESS\n  COMPLETED\n  FAILED\n  PARTIAL\n}\n",
  "inlineSchemaHash": "6192667771631bbfe289d9660258629a6f10e97e60a6e0bf51e2dbc576b3090c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"brokerAccounts\",\"kind\":\"object\",\"type\":\"BrokerAccount\",\"relationName\":\"BrokerAccountToUser\"},{\"name\":\"trades\",\"kind\":\"object\",\"type\":\"Trade\",\"relationName\":\"TradeToUser\"}],\"dbName\":\"users\"},\"BrokerAccount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brokerType\",\"kind\":\"enum\",\"type\":\"BrokerType\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"encryptedCredentials\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastSyncAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSyncStatus\",\"kind\":\"enum\",\"type\":\"SyncStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BrokerAccountToUser\"},{\"name\":\"trades\",\"kind\":\"object\",\"type\":\"Trade\",\"relationName\":\"BrokerAccountToTrade\"},{\"name\":\"syncLogs\",\"kind\":\"object\",\"type\":\"SyncLog\",\"relationName\":\"BrokerAccountToSyncLog\"}],\"dbName\":\"broker_accounts\"},\"Trade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brokerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"externalTradeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tradeType\",\"kind\":\"enum\",\"type\":\"TradeType\"},{\"name\":\"openTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"closeTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"openPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"closePrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"profit\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"commission\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"swap\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TradeToUser\"},{\"name\":\"brokerAccount\",\"kind\":\"object\",\"type\":\"BrokerAccount\",\"relationName\":\"BrokerAccountToTrade\"}],\"dbName\":\"trades\"},\"SyncLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brokerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SyncStatus\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tradesImported\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tradesFailed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"errorDetails\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"brokerAccount\",\"kind\":\"object\",\"type\":\"BrokerAccount\",\"relationName\":\"BrokerAccountToSyncLog\"}],\"dbName\":\"sync_logs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

