generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  brokerAccounts BrokerAccount[]
  trades         Trade[]
  
  @@map("users")
}

model BrokerAccount {
  id                String   @id @default(uuid())
  userId            String
  brokerType        BrokerType
  accountNumber     String
  displayName       String?
  
  // Encrypted credentials stored here
  encryptedCredentials String
  
  isActive          Boolean  @default(true)
  lastSyncAt        DateTime?
  lastSyncStatus    SyncStatus?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades            Trade[]
  syncLogs          SyncLog[]
  
  @@unique([userId, accountNumber, brokerType])
  @@map("broker_accounts")
}

model Trade {
  id                String   @id @default(uuid())
  userId            String
  brokerAccountId   String
  
  // Normalized trade data
  externalTradeId   String   // Trade ID from broker
  symbol            String
  tradeType         TradeType
  
  openTime          DateTime
  closeTime         DateTime
  
  quantity          Decimal  @db.Decimal(18, 8)
  openPrice         Decimal  @db.Decimal(18, 8)
  closePrice        Decimal  @db.Decimal(18, 8)
  
  profit            Decimal  @db.Decimal(18, 2)
  commission        Decimal  @db.Decimal(18, 2)
  swap              Decimal? @db.Decimal(18, 2)
  
  // Analytics fields
  tags              String[]
  notes             String?
  
  // Metadata
  rawData           Json?    // Store original broker data
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brokerAccount     BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
  
  @@unique([brokerAccountId, externalTradeId])
  @@index([userId, closeTime])
  @@index([symbol])
  @@map("trades")
}

model SyncLog {
  id                String   @id @default(uuid())
  brokerAccountId   String
  
  status            SyncStatus
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  
  tradesImported    Int      @default(0)
  tradesFailed      Int      @default(0)
  
  errorMessage      String?
  errorDetails      Json?
  
  brokerAccount     BrokerAccount @relation(fields: [brokerAccountId], references: [id], onDelete: Cascade)
  
  @@map("sync_logs")
}

enum BrokerType {
  MT5
  MT4
  IBKR
}

enum TradeType {
  BUY
  SELL
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  PARTIAL
}